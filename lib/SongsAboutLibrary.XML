<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SongsAboutLibrary</name>
    </assembly>
    <members>
        <member name="T:SongsAbout.Converter">
            <summary>
            Static Class to hold methods to convert to and from common Data types 
            </summary>
        </member>
        <member name="M:SongsAbout.Converter.GetFullAlbum(SpotifyAPI.Web.Models.SpotifyAlbum)">
            <summary>
            Converts a Spotify Album to a SpotifyFullAlbum
            </summary>
            <param name="album">The album to convert</param>
            <returns>The Full version of the passed in album</returns>
        </member>
        <member name="M:SongsAbout.Converter.ImageFromBytes(System.Byte[])">
            <summary>
            Convert an image to a byte Array
            </summary>
            <param name="image"></param>
            <returns></returns>
            <exception cref="T:SongsAbout.ConversionError"></exception>
        </member>
        <member name="M:SongsAbout.Converter.ImageToBytes(System.Drawing.Image)">
            <summary>
            Convert an image to a byte Array
            </summary>
            <param name="image"></param>
            <returns></returns>
            <exception cref="T:SongsAbout.ConversionError"></exception>
        </member>
        <member name="M:SongsAbout.Converter.GetFullArtist(SpotifyAPI.Web.Models.SpotifyArtist)">
            <summary>
            
            </summary>
            <param name="artist"></param>
            <returns></returns>
            <exception cref="T:SpotifyAPI.Web.SpotifyConversionError"></exception>
        </member>
        <member name="T:SongsAbout.Database.SongDatabase">
            <summary>
            Wrapper class to interact with database easier
            </summary>
            <exception cref="T:SongsAbout.InvalidInitializedError">This class can only be initialized once</exception>
            <see cref="M:SongsAbout.Database.SongDatabase.Initialize"/>
            <see cref="P:SongsAbout.Database.SongDatabase.IsInitialized"/>
        </member>
        <member name="M:SongsAbout.Database.SongDatabase.AlbumCollection.#ctor">
            <summary>
            Initializes the connector to the AlbumList
            </summary>
            <exception cref="T:SongsAbout.InvalidInitializedError"></exception>"
        </member>
        <member name="P:SongsAbout.Database.SongDatabase.AlbumCollection.Item(System.Int32)">
            <summary>
            Get the Album of the given id if it exists, otherwise throws an exception
            </summary>
            <returns></returns>
            <param name="id"></param>
            <exception cref="T:SongsAbout.LoadError"></exception>
            <exception cref="T:System.Data.Entity.Infrastructure.DbUpdateException"></exception>
        </member>
        <member name="M:SongsAbout.Database.SongDatabase.AlbumCollection.Contains(System.Int32,System.Boolean)">
            <summary>
            Verifies if an Album of the given id exists
            </summary>
            <param name="id"></param>
            <returns></returns>
            <exception cref="T:SongsAbout.DbException"></exception>
        </member>
        <member name="P:SongsAbout.Database.SongDatabase.AlbumCollection.Items">
            <summary>
            Returns A list of all Existing Albums in the database
            </summary>            
            <returns></returns>
            <exception cref="T:SongsAbout.DbException"></exception>
        </member>
        <member name="M:SongsAbout.Database.SongDatabase.AlbumCollection.Add(SongsAbout.Entities.Album)">
            <summary>
            Submit Changes to the Database
            </summary>
            <exception cref="T:SongsAbout.NullValueError"></exception>
            <exception cref="T:System.Data.Entity.Infrastructure.DbUpdateException"></exception>
            <exception cref="T:SongsAbout.SaveError"></exception>"
        </member>
        <member name="M:SongsAbout.Database.SongDatabase.ArtistCollection.#ctor">
            <summary>
            Initializes the connector to the ArtistList
            </summary>
            <exception cref="T:SongsAbout.InvalidInitializedError"></exception>"
        </member>
        <member name="P:SongsAbout.Database.SongDatabase.ArtistCollection.Item(System.Int32)">
            <summary>
            Get the Artist of the given id if it exists, otherwise throws an exception
            </summary>
            <param name="id"></param>
            <exception cref="T:SongsAbout.NullValueError"></exception>
            <exception cref="T:SongsAbout.EntityNotFoundError"></exception>
            <exception cref="T:SongsAbout.LoadError"></exception>"
            <exception cref="!:DbUpdateException"></exception>
        </member>
        <member name="M:SongsAbout.Database.SongDatabase.ArtistCollection.Contains(System.Int32,System.Boolean)">
            <summary>
            Verifies if an artist of the given id exists
            </summary>
            <param name="id"></param>
            <returns></returns>
            <exception cref="T:SongsAbout.DbException"></exception>
            /// <exception cref="T:SongsAbout.NullValueError"></exception>
        </member>
        <member name="P:SongsAbout.Database.SongDatabase.ArtistCollection.Items">
            <summary>
            Returns A list of all Existing Artists in the database
            </summary>            
            <returns></returns>
            <exception cref="T:SongsAbout.DbException"></exception>
        </member>
        <member name="M:SongsAbout.Database.SongDatabase.ArtistCollection.Add(SongsAbout.Entities.Artist)">
            <summary>
            Submit Changes to the Database
            </summary>
            <exception cref="T:SongsAbout.NullValueError"></exception>
            <exception cref="T:SongsAbout.SaveError"></exception>"
        </member>
        <member name="T:SongsAbout.Database.SongDatabase.EntityCollection">
            <summary>
            Base clas
            </summary>
        </member>
        <member name="P:SongsAbout.Database.SongDatabase.EntityCollection.AllNames">
            <summary>
            A List of the names of the items in the database
            </summary>
        </member>
        <member name="P:SongsAbout.Database.SongDatabase.EntityCollection.CachedNames">
            <summary>
            A List of the c names of the items in the database
            </summary>
        </member>
        <member name="P:SongsAbout.Database.SongDatabase.EntityCollection.Count">
            <summary>
            The number of rows in the table
            </summary>
        </member>
        <member name="P:SongsAbout.Database.SongDatabase.EntityCollection.DbEntityType">
            <summary>
            The type of entity mapped to this collection
            </summary>
        </member>
        <member name="P:SongsAbout.Database.SongDatabase.EntityCollection.HasIntId">
            <summary>
            True if the table has an int ID column
            </summary>
        </member>
        <member name="T:SongsAbout.Database.SongDatabase.EntityCollection`1">
            <summary>
            Generic Class to access the items in the collection
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SongsAbout.Database.SongDatabase.EntityCollection`1.#ctor(System.String)">
            <summary>
            Construct the base class, can only be called once.
            </summary>
            <param name="childname"></param>
        </member>
        <member name="M:SongsAbout.Database.SongDatabase.EntityCollection`1.FindByName(System.String)">
            <summary>
            Find the intended item by name lookup
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:SongsAbout.Database.SongDatabase.EntityCollection`1.CachedItems">
            <summary>
            Returns the last returned list of items
            </summary>
        </member>
        <member name="P:SongsAbout.Database.SongDatabase.EntityCollection`1.Items">
            <summary>
            Queries the database and returns a list of all the items
            </summary>
        </member>
        <member name="P:SongsAbout.Database.SongDatabase.EntityCollection`1.CachedNames">
            <summary>
            Returns the last returned list of names
            </summary>
        </member>
        <member name="P:SongsAbout.Database.SongDatabase.EntityCollection`1.AllNames">
            <summary>
            Queries the database and returns a list of all the items
            </summary>
        </member>
        <member name="P:SongsAbout.Database.SongDatabase.EntityCollection`1.Item(System.String)">
            <summary>
            Get the Entity of the given name if it exists, otherwise throws an exception
            </summary>
            <param name="name"></param>
            <exception cref="T:SongsAbout.NullValueError"></exception>
            <exception cref="T:SongsAbout.LoadError"></exception>"
        </member>
        <member name="M:SongsAbout.Database.SongDatabase.EntityCollection`1.Contains(System.String,System.Boolean)">
            <summary>
            Verifies if an entity of the given name exists
            </summary>
            <param name="name">he name of the intended entity</param>
            <param name="checkCache">Set to true if you don't want to run a new query against the database.</param>
            <returns></returns>
            <exception cref="T:SongsAbout.DbException"></exception>
            <exception cref="T:SongsAbout.NullValueError"></exception>
        </member>
        <member name="P:SongsAbout.Database.SongDatabase.EntityCollection`1.Count">
            <summary>
            Returns the number of items in the collection
            </summary>
        </member>
        <member name="M:SongsAbout.Database.SongDatabase.EntityCollection`1.Add(`0)">
            <summary>
            Ads a new item to the Collection, and to the corresponding database table
            </summary>
            <param name="entity"></param>
        </member>
        <member name="P:SongsAbout.Database.SongDatabase.EntityCollection`1.Current">
            <summary>
            Gets the element at the current position of the enumerator.
            </summary>
        </member>
        <member name="M:SongsAbout.Database.SongDatabase.EntityCollection`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; 
            false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">   The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:SongsAbout.Database.SongDatabase.EntityCollection`1.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>  
            /// <exception cref="T:System.InvalidOperationException">   The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:SongsAbout.Database.SongDatabase.EntityCollection`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SongsAbout.Database.SongDatabase.EntityCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the Collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:SongsAbout.Database.SongDatabase.EntityCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the Collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:SongsAbout.Database.SongDatabase.GenreCollection.#ctor">
            <summary>
            Initializes the connector to the GenreList
            </summary>
            <exception cref="T:SongsAbout.InvalidInitializedError"></exception>"
        </member>
        <member name="P:SongsAbout.Database.SongDatabase.GenreCollection.Items">
            <summary>
            Returns A list of all Existing Genres in the database
            </summary>            
            <returns></returns>
            <exception cref="T:SongsAbout.DbException"></exception>
        </member>
        <member name="M:SongsAbout.Database.SongDatabase.GenreCollection.Add(SongsAbout.Entities.Genre)">
            <summary>
            Submit Changes to the Database
            </summary>
            <exception cref="T:SongsAbout.NullValueError"></exception>
            <exception cref="T:SongsAbout.ValueAlreadyPresentException"></exception>"
            <exception cref="T:SongsAbout.DbException"></exception>"
        </member>
        <member name="M:SongsAbout.Database.SongDatabase.PlaylistCollection.#ctor">
            <summary>
            Initializes the connector to the GenreList
            </summary>
            <exception cref="T:SongsAbout.InvalidInitializedError"></exception>"
        </member>
        <member name="P:SongsAbout.Database.SongDatabase.PlaylistCollection.Items">
            <summary>
            Returns A list of all Existing Genres in the database
            </summary>            
            <returns></returns>
            <exception cref="T:SongsAbout.DbException"></exception>
        </member>
        <member name="M:SongsAbout.Database.SongDatabase.PlaylistCollection.Add(SongsAbout.Entities.Playlist)">
            <summary>
            Submit Changes to the Database
            </summary>
            <exception cref="T:SongsAbout.NullValueError"></exception>
            <exception cref="T:SongsAbout.ValueAlreadyPresentException"></exception>"
            <exception cref="T:SongsAbout.DbException"></exception>"
        </member>
        <member name="P:SongsAbout.Database.SongDatabase.IsInitialized">
            <summary>
            Represents if the SongDatabase has been initialized
            </summary>
        </member>
        <member name="P:SongsAbout.Database.SongDatabase.LargeQuery">
            <summary>
            Set this to true if you want to not run a new query against the database;
            </summary>
        </member>
        <member name="M:SongsAbout.Database.SongDatabase.Initialize">
            <summary>
            Single use Constructor do be used at Program Start
            </summary>
            <exception cref="T:SongsAbout.InvalidInitializedError"></exception>
        </member>
        <member name="P:SongsAbout.Database.SongDatabase.Genres">
            <summary>
            Class to interact with the Genres table in the database
            </summary>
        </member>
        <member name="P:SongsAbout.Database.SongDatabase.Tracks">
            <summary>
            Class to interact with the Tracks table in the database
            </summary>
        </member>
        <member name="P:SongsAbout.Database.SongDatabase.Albums">
            <summary>
            Class to interact with the Albums table in the database
            </summary>
        </member>
        <member name="P:SongsAbout.Database.SongDatabase.Artists">
            <summary>
            Class to interact with the Artists table in the database
            </summary>
        </member>
        <member name="P:SongsAbout.Database.SongDatabase.Playlists">
            <summary>
            Class to interact with the Playlists table in the database
            </summary>
        </member>
        <member name="P:SongsAbout.Database.SongDatabase.Tags">
            <summary>
            Class to interact with the Tags table in the database
            </summary>
        </member>
        <member name="M:SongsAbout.Database.SongDatabase.TagCollection.#ctor">
            <summary>
            Initializes the connector to the GenreList
            </summary>
            <exception cref="T:SongsAbout.InvalidInitializedError"></exception>"
        </member>
        <member name="P:SongsAbout.Database.SongDatabase.TagCollection.Items">
            <summary>
            Returns A list of all Existing Genres in the database
            </summary>            
            <returns></returns>
            <exception cref="T:SongsAbout.DbException"></exception>
        </member>
        <member name="M:SongsAbout.Database.SongDatabase.TagCollection.Add(SongsAbout.Entities.Tag)">
            <summary>
            Submit Changes to the Database
            </summary>
            <exception cref="T:SongsAbout.NullValueError"></exception>
            <exception cref="T:SongsAbout.ValueAlreadyPresentException"></exception>"
            <exception cref="T:SongsAbout.DbException"></exception>"
        </member>
        <member name="M:SongsAbout.Database.SongDatabase.TrackCollection.#ctor">
            <summary>
            Initializes the connector to the TrackList
            </summary>
            <exception cref="T:SongsAbout.InvalidInitializedError"></exception>"
        </member>
        <member name="P:SongsAbout.Database.SongDatabase.TrackCollection.Item(System.Int32)">
            <summary>
            Get the Track of the given id if it exists, otherwise throws an exception
            </summary>
            <param name="id"></param>
            <exception cref="T:SongsAbout.NullValueError"></exception>
            <exception cref="T:SongsAbout.LoadError"></exception>"
        </member>
        <member name="M:SongsAbout.Database.SongDatabase.TrackCollection.Contains(System.Int32,System.Boolean)">
            <summary>
            Verifies if an Track of the given id exists
            </summary>
            <param name="id"></param>
            <returns></returns>
            <exception cref="T:SongsAbout.DbException"></exception>
        </member>
        <member name="P:SongsAbout.Database.SongDatabase.TrackCollection.Items">
            <summary>
            Returns A list of all Existing Tracks in the database
            </summary>            
            <returns></returns>
            <exception cref="T:SongsAbout.DbException"></exception>
        </member>
        <member name="P:SongsAbout.Database.SongDatabase.TrackCollection.AllNames">
            <summary>
            Loads the Names of the existing Tracks to a List
            </summary>
            <exception cref="T:SongsAbout.DbException"></exception>
        </member>
        <member name="M:SongsAbout.Database.SongDatabase.TrackCollection.Add(SongsAbout.Entities.Track)">
            <summary>
            Submit Changes to the Database
            </summary>
            <exception cref="T:SongsAbout.NullValueError"></exception>
            <exception cref="T:SongsAbout.SaveError"></exception>"
        </member>
        <member name="T:SongsAbout.Database.IEntityCollection">
            <summary>
            Provides simple functionality for interacting with Database tables
            </summary>
        </member>
        <member name="P:SongsAbout.Database.IEntityCollection.Count">
            <summary>
            The number of rows in the respective table
            </summary>
        </member>
        <member name="T:SongsAbout.Database.IEntityIdAccessor`1">
            <summary>
            Provides Functionality to interact with Database Tables using bracket notation for the Entity Id
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:SongsAbout.Database.IEntityNameAccessor`1">
            <summary>
            Provides Functionality to interact with Database Tables using bracket notation for the Entity Name
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:SongsAbout.Entities.Album">
            <summary>
            Al album from the database
            </summary>
        </member>
        <member name="P:SongsAbout.Entities.Album.Year">
            <summary>
            The Year the album was released
            </summary>
        </member>
        <member name="P:SongsAbout.Entities.Album.Uri">
            <summary>
            The Spotify URI for this album
            </summary>
        </member>
        <member name="P:SongsAbout.Entities.Album.CoverArtBytes">
            <summary>
            Returns the cover art of this album as a byte array
            </summary>
            <seealso cref="P:SongsAbout.Entities.Album.CoverArt"/>
        </member>
        <member name="M:SongsAbout.Entities.Album._loadTracks">
            <summary>
            Load all of the tracks of this album directly from the database
            </summary>
            <returns></returns>
        </member>
        <member name="M:SongsAbout.Entities.Album.LoadAllFromDatabase">
            <summary>
            Load a list of All of the albums currently stored in the database
            </summary>
            <returns></returns>
        </member>
        <member name="P:SongsAbout.Entities.Album.TrackList">
            <summary>
            Returns the tracks for this album as a list
            </summary>
        </member>
        <member name="P:SongsAbout.Entities.Album.GenreList">
            <summary>
            Returns the genres for this Album as a list
            </summary>
        </member>
        <member name="P:SongsAbout.Entities.Album.Artist">
            <summary>
            Returns the Main Artist of this Album
            </summary>
        </member>
        <member name="P:SongsAbout.Entities.Album.ArtistId">
            <summary>
            Get the id of the main Artist for this Album
            </summary>
        </member>
        <member name="P:SongsAbout.Entities.Album.CoverArt">
            <summary>
            Returns a Bitmap of this Albums Cover Art
            </summary>
        </member>
        <member name="M:SongsAbout.Entities.Album.GetGenres">
            <summary>
            Returns a list of this Album's Genres as strings
            </summary>
            <returns></returns>
        </member>
        <member name="M:SongsAbout.Entities.Album.AddGenre(System.String)">
            <summary>
            Add's a Genre to the Album, and to the Database if it doesn't already exist
            </summary>
            <param name="genre"></param>
        </member>
        <member name="M:SongsAbout.Entities.Album.Save">
            <summary>
            Save the Album to the Database
            </summary>
            <exception cref="T:SongsAbout.NullValueError"></exception>
            <exception cref="T:SongsAbout.SaveError"></exception>
        </member>
        <member name="M:SongsAbout.Entities.Album.Exists(System.String)">
            <summary>
            Checks if an album with the given name exists or not
            </summary>
            <param name="id"></param>
            <returns></returns>
            <exception cref="T:SongsAbout.NullValueError"></exception>
        </member>
        <member name="M:SongsAbout.Entities.Album.Exists(System.Int32)">
            <summary>
            Checks if an album with the given id exists or not
            </summary>
            <param name="id"></param>
            <returns></returns>
            /// <exception cref="T:SongsAbout.NullValueError"></exception>
        </member>
        <member name="M:SongsAbout.Entities.Album.Load(System.String)">
            <summary>
            Load an Artist From the database. Throws an error if it returns  null from the database
            </summary>
            <param name="title"></param>
            <returns></returns>
            <exception cref="T:SongsAbout.NullValueError"></exception>
            <exception cref="T:SongsAbout.EntityNotFoundError"></exception>
            <exception cref="T:SongsAbout.LoadError"></exception>
        </member>
        <member name="M:SongsAbout.Entities.Album.Load(System.Int32)">
            <summary>
            Load an Artist From the database. Throws an error if it returns  null from the database
            </summary>
            <param name="id"></param>
            <returns></returns>
            <exception cref="T:SongsAbout.NullValueError"></exception>
            <exception cref="T:SongsAbout.EntityNotFoundError"></exception>
            <exception cref="T:SongsAbout.LoadError"></exception>
        </member>
        <member name="M:SongsAbout.Entities.Album.UpdateArtist(SpotifyAPI.Web.Models.SpotifyArtist)">
            <summary>
            
            </summary>
            <param name="artist"></param>
            <exception cref="T:SongsAbout.UpdateFromSpotifyError"></exception>
        </member>
        <member name="M:SongsAbout.Entities.Album.SetGenres(System.Collections.Generic.List{SongsAbout.Entities.Genre})">
            <summary>
            Sets the genres for this album from the passed in list
            </summary>
            <param name="genres"></param>
        </member>
        <member name="T:SongsAbout.Entities.Artist">
            <summary>
            Partial Class to hold Artist Functions
            </summary>
        </member>
        <member name="M:SongsAbout.Entities.Artist.Save">
            <summary>
            Submit Changes to the Database
            </summary>
            <exception cref="T:SongsAbout.NullValueError"></exception>
            <exception cref="T:SongsAbout.UpdateFromSpotifyError"></exception>"
            <exception cref="T:System.Data.Entity.Infrastructure.DbUpdateException"></exception>
            <exception cref="T:SongsAbout.DbException"></exception>"
        </member>
        <member name="M:SongsAbout.Entities.Artist.Update(SpotifyAPI.Web.Models.SpotifyArtist)">
            <summary>
            Initialize the member data from spotify Aritst
            </summary>
            <param name="artist"></param>
            <exception cref="T:SongsAbout.UpdateFromSpotifyError"></exception>
        </member>
        <member name="M:SongsAbout.Entities.Artist.Load(System.String)">
            <summary>
            Get the Artist of the given name if it exists, otherwise throws an exception
            </summary>
            <param name="name"></param>
            <exception cref="T:SongsAbout.EntityNotFoundError"></exception>
            <exception cref="T:SongsAbout.LoadError"></exception>"
        </member>
        <member name="M:SongsAbout.Entities.Artist.Load(System.Int32)">
            <summary>
            Load the artist of the given id from the database
            </summary>
            <param name="id"></param>
            <exception cref="T:SongsAbout.EntityNotFoundError"></exception>
            <exception cref="T:SongsAbout.LoadError"></exception>"
            <returns></returns>
        </member>
        <member name="P:SongsAbout.Entities.Track.Album">
            <summary>
            Get the main Album of the Track
            </summary>
            <exception cref="T:SongsAbout.EntityNotFoundError"></exception>
            <exception cref="T:SongsAbout.LoadError"></exception>
        </member>
        <member name="P:SongsAbout.Entities.Track.Artist">
            <summary>
            The Main artist of the track
            </summary>
            <exception cref="T:SongsAbout.EntityNotFoundError"></exception>
            <exception cref="T:SongsAbout.LoadError"></exception>
        </member>
        <member name="M:SongsAbout.Entities.Track.#ctor(SpotifyAPI.Web.Models.SpotifyTrack)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <exception cref="T:SongsAbout.UpdateFromSpotifyError"></exception>
        </member>
        <member name="M:SongsAbout.Entities.Track.UpdateArtist(SpotifyAPI.Web.Models.SpotifyArtist)">
            <summary>
            Update the Track Artist from an FArtist
            </summary>
            <param name="artist"></param>
            <exception cref="T:SongsAbout.UpdateFromSpotifyError"></exception>
        </member>
        <member name="M:SongsAbout.Entities.Track.UpdateAlbum(SpotifyAPI.Web.Models.SpotifyAlbum)">
            <summary>
            Update the Track Album from an FAlbum
            </summary>
            <param name="album"></param>
            <exception cref="T:SongsAbout.UpdateFromSpotifyError"></exception>
        </member>
        <member name="P:SongsAbout.Entities.DbEntity.TitleColumnName">
            <summary>
            THe name of the title column of thiis DbEntity
            </summary>
        </member>
        <member name="M:SongsAbout.Importer.ImportTrack(SpotifyAPI.Web.Models.SpotifyTrack)">
            <summary>
            Import the Given Spotify Track into the Database
            </summary>
            <param name="track"></param>
            <exception cref="T:SongsAbout.SaveError"></exception>
            <exception cref="T:SpotifyAPI.Web.SpotifyImportError"></exception>
        </member>
        <member name="M:SongsAbout.Importer.ImportSavedTracks">
            <summary>
            Import All Saved Tracks into the datbase
            </summary>
            <exception cref="T:SpotifyAPI.Web.SpotifyUndefinedAPIError"></exception>
            <exception cref="T:SpotifyAPI.Web.SpotifyException"></exception>
        </member>
        <member name="T:SongsAbout.DataSetTableAdapters.TracksTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:SongsAbout.DataSetTableAdapters.ArtistsTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:SongsAbout.DataSetTableAdapters.TrackArtistsTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:SongsAbout.DataSetTableAdapters.TrackGenresTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:SongsAbout.DataSetTableAdapters.GenresTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:SongsAbout.DataSetTableAdapters.AlbumsTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:SongsAbout.DataSetTableAdapters.TagsTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:SongsAbout.DataSetTableAdapters.TrackTagsTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:SongsAbout.DataSetTableAdapters.ListsTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:SongsAbout.DataSetTableAdapters.AlbumTracksTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:SongsAbout.DataSetTableAdapters.AlbumGenresTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:SongsAbout.DataSetTableAdapters.TopicsTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:SongsAbout.DataSetTableAdapters.TrackTopicsTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:SongsAbout.DataSetTableAdapters.QueriesTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:SongsAbout.DataSetTableAdapters.TableAdapterManager">
             <summary>
            TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
            </summary>
        </member>
        <member name="M:SongsAbout.DataSetTableAdapters.TableAdapterManager.UpdateUpdatedRows(SongsAbout.DataSet,System.Collections.Generic.List{System.Data.DataRow},System.Collections.Generic.List{System.Data.DataRow})">
             <summary>
            Update rows in top-down order.
            </summary>
        </member>
        <member name="M:SongsAbout.DataSetTableAdapters.TableAdapterManager.UpdateInsertedRows(SongsAbout.DataSet,System.Collections.Generic.List{System.Data.DataRow})">
             <summary>
            Insert rows in top-down order.
            </summary>
        </member>
        <member name="M:SongsAbout.DataSetTableAdapters.TableAdapterManager.UpdateDeletedRows(SongsAbout.DataSet,System.Collections.Generic.List{System.Data.DataRow})">
             <summary>
            Delete rows in bottom-up order.
            </summary>
        </member>
        <member name="M:SongsAbout.DataSetTableAdapters.TableAdapterManager.GetRealUpdatedRows(System.Data.DataRow[],System.Collections.Generic.List{System.Data.DataRow})">
             <summary>
            Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
            </summary>
        </member>
        <member name="M:SongsAbout.DataSetTableAdapters.TableAdapterManager.UpdateAll(SongsAbout.DataSet)">
             <summary>
            Update all changes to the dataset.
            </summary>
        </member>
        <member name="T:SongsAbout.DataSetTableAdapters.TableAdapterManager.UpdateOrderOption">
             <summary>
            Update Order Option
            </summary>
        </member>
        <member name="T:SongsAbout.DataSetTableAdapters.TableAdapterManager.SelfReferenceComparer">
             <summary>
            Used to sort self-referenced table's rows
            </summary>
        </member>
        <member name="T:SongsAbout.DataSet">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="T:SongsAbout.DataSet.AlbumGenresDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:SongsAbout.DataSet.AlbumsDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:SongsAbout.DataSet.AlbumTracksDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:SongsAbout.DataSet.ArtistsDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:SongsAbout.DataSet.GenresDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:SongsAbout.DataSet.ListsDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:SongsAbout.DataSet.TagsDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:SongsAbout.DataSet.TopicsDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:SongsAbout.DataSet.TrackArtistsDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:SongsAbout.DataSet.TrackGenresDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:SongsAbout.DataSet.TracksDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:SongsAbout.DataSet.TrackTagsDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:SongsAbout.DataSet.TrackTopicsDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:SongsAbout.DataSet.AlbumGenresRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:SongsAbout.DataSet.AlbumsRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:SongsAbout.DataSet.AlbumTracksRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:SongsAbout.DataSet.ArtistsRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:SongsAbout.DataSet.GenresRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:SongsAbout.DataSet.ListsRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:SongsAbout.DataSet.TagsRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:SongsAbout.DataSet.TopicsRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:SongsAbout.DataSet.TrackArtistsRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:SongsAbout.DataSet.TrackGenresRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:SongsAbout.DataSet.TracksRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:SongsAbout.DataSet.TrackTagsRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:SongsAbout.DataSet.TrackTopicsRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:SongsAbout.DataSet.AlbumGenresRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:SongsAbout.DataSet.AlbumsRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:SongsAbout.DataSet.AlbumTracksRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:SongsAbout.DataSet.ArtistsRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:SongsAbout.DataSet.GenresRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:SongsAbout.DataSet.ListsRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:SongsAbout.DataSet.TagsRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:SongsAbout.DataSet.TopicsRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:SongsAbout.DataSet.TrackArtistsRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:SongsAbout.DataSet.TrackGenresRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:SongsAbout.DataSet.TracksRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:SongsAbout.DataSet.TrackTagsRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:SongsAbout.DataSet.TrackTopicsRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="F:SongsAbout.Enums.DbEntityType.Artist">
            <summary>
            Matches to Artists table
            </summary>
        </member>
        <member name="F:SongsAbout.Enums.DbEntityType.Album">
            <summary>
            Matches to Albums table
            </summary>
        </member>
        <member name="F:SongsAbout.Enums.DbEntityType.Track">
            <summary>
            Matches to Tracks table
            </summary>
        </member>
        <member name="F:SongsAbout.Enums.DbEntityType.Genre">
            <summary>
            Matches to Genres table
            </summary>
        </member>
        <member name="F:SongsAbout.Enums.DbEntityType.Tag">
            <summary>
            Matches to Tags table
            </summary>
        </member>
        <member name="F:SongsAbout.Enums.DbEntityType.Playlist">
            <summary>
            Matches to Lists table
            </summary>
        </member>
        <member name="F:SongsAbout.Enums.DbEntityType.Integral">
            <summary>
            Matches to either the Artists, Albums, or Tracks table
            </summary>
        </member>
        <member name="F:SongsAbout.Enums.DbEntityType.Grouping">
            <summary>
            Matches to either the Genres, Tags, or Lists table
            </summary>
        </member>
        <member name="F:SongsAbout.Enums.DbEntityType.None">
            <summary>
            Doesn't match to any table in the database
            </summary>
        </member>
        <member name="T:SongsAbout.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:SongsAbout.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:SongsAbout.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:SongsAbout.Properties.Resources.CheckMark">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SongsAbout.Properties.Resources.CheckMarkBlue">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SongsAbout.Properties.Resources.CheckMarkBlue1">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SongsAbout.Properties.Resources.ConnectionStringLaptop">
            <summary>
              Looks up a localized string similar to Data Source=JDEGRAW\SQLEXPRESS;Initial Catalog=SongsAboutSQLDB;Integrated Security=True.
            </summary>
        </member>
        <member name="P:SongsAbout.Properties.Resources.MusicNote">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SongsAbout.Properties.Resources.ProfilePic">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SongsAbout.Properties.Resources.Spotify_Icon_Black">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SongsAbout.Properties.Resources.Spotify_Icon_Green">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SongsAbout.Properties.Resources.Spotify_Icon_White">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SongsAbout.Properties.Resources.SpotifyClientID">
            <summary>
              Looks up a localized string similar to 4d8b5c54f513430f8b0f486974c89402.
            </summary>
        </member>
        <member name="T:SongsAbout.UserSpotify">
            <summary>
            Class to hold Methods used for dealing with SpotifyAPI, specific to the user
            </summary>
        </member>
        <member name="P:SongsAbout.UserSpotify.WebAPI">
            <summary>
            Use this to Call the WebAPI for spotify
            </summary>
        </member>
        <member name="P:SongsAbout.UserSpotify.PrivateId">
            <summary>
            User's private Spotify Id
            </summary>
        </member>
        <member name="P:SongsAbout.UserSpotify.ProfilePic">
            <summary>
            User's Spotify Profile Picture
            </summary>
        </member>
        <member name="P:SongsAbout.UserSpotify.PrivateProfile">
            <summary>
            Get the User's Private Profile
            </summary>
        </member>
        <member name="P:SongsAbout.UserSpotify.FollowedArtists">
            <summary>
            Get the User's Followed Artists
            </summary>
        </member>
        <member name="M:SongsAbout.UserSpotify.AuthenticateAsync(System.String)">
            <summary>
            Initial Setup of USer Spotify Settings
            </summary>
        </member>
        <member name="M:SongsAbout.UserSpotify.Authenticate(System.String)">
            <summary>
            Initial Setup of USer Spotify Settings
            </summary>
        </member>
        <member name="M:SongsAbout.UserSpotify.ImplicitConnectSpotify">
            <summary>
            Implicitly connect spotify. Not yet effective
            </summary>        
        </member>
        <member name="M:SongsAbout.UserSpotify.FetchProfile">
            <summary>
            Gets profile info via WebAPI. Assigns user settings PrivateProfile, PrivateId, and PublicProfile
            </summary>
        </member>
        <member name="M:SongsAbout.UserSpotify.Search(System.String,SpotifyAPI.Web.Enums.SearchType,System.Int32,System.Int32,System.Int32)">
            <summary>
            Search an from Spotify
            </summary>
            <param name="query"></param>
            <param name="searchType"></param>
            <param name="limit"></param>
            <param name="offset"></param>
            <param name="retryCount"></param>
            <returns></returns>
        </member>
        <member name="M:SongsAbout.UserSpotify.GetSavedTracks">
            <summary>
            Returns a list of User's saved tracks
            </summary>
            <returns></returns>
        </member>
        <member name="M:SongsAbout.UserSpotify.FetchProfilePic">
            <summary>
            Assign User Setting ProfilePic
            </summary>
            <exception cref="T:SpotifyAPI.Web.SpotifyException"></exception>
            <exception cref="T:SpotifyAPI.Web.SpotifyUndefinedAPIError"></exception>
            <exception cref="T:SpotifyAPI.Web.SpotifyImageImportError"></exception>
        </member>
        <member name="M:SongsAbout.UserSpotify.FetchFollowedArtists">
            <summary>
            Assign User Setting for FollowedArtists
            </summary>
        </member>
        <member name="M:SongsAbout.UserSpotify.GetTopTracks">
            <summary>
            Get the User's top tracks
            </summary>
            <returns></returns>
        </member>
        <member name="M:SongsAbout.UserSpotify.GetPlaylists">
            <summary>
            Returns the User's Playlists
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
